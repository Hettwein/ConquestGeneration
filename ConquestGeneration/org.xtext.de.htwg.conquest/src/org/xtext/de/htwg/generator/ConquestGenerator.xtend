/*
 * generated by Xtext 2.11.0
 */
package org.xtext.de.htwg.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.de.htwg.conquest.Conquest
import org.xtext.de.htwg.conquest.ColorList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ConquestGenerator extends AbstractGenerator {
	
	override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {

		val conquest = resource.contents.head as Conquest
		val colors = createColorUtil(conquest.colorList)
		fsa.generateFile("ColorUtil.java", colors)
	}
	
	def createColorUtil(ColorList colorList) '''
		package de.htwg.conquest.util;
		
		import java.awt.Color;
		import java.util.ArrayList;
		import java.util.Arrays;
		import java.util.List;
		
		public class ColorUtil {
		
			public static final List<Color> getColorSet(int num) {
				return colors.subList(0, num);
			}
			
			public static final int getSize() {
				return colors.size();
			}
		
			private static final List<Color> colors = new ArrayList<>(Arrays.asList(
				«FOR color : colorList.colors SEPARATOR ", "»
					Color.«color»
				«ENDFOR»
			));
			
			public static final String getColorText(Color c) {
				String co = "";
				«FOR color : colorList.colors SEPARATOR " else "»
					if(c.equals(Color.«color»)) {
						co = "«color.toString.toLowerCase»";
					}
				«ENDFOR»
				 else {
					co = " ";
				}
				return co;
			}
		}
	'''
}

